@page "/EmployeeView/{id:int}"

@rendermode InteractiveServer

@inject MessageService<EmployeeEndpoint> EmployeeService
@inject MessageService<EmpInfrEndpoint> EmployeeInfractionService
@inject MessageService<EmploymentDateEndpoint> EmploymentDateService
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<div class="d-flex justify-content-center mt-3">
    <div class="div-content mb-2">
        @if (EmployeeInfo is not null)
        {
            <div>
                <div class="d-flex flex-row align-items-center mb-4">
                    <i class="bi bi-person-circle me-3 fs-2"></i>
                    <div class="d-flex flex-column">
                        <div class="d-flex align-items-center">
                            <h3 class="mb-0"><strong>@ToTitleCase(EmployeeInfo.FirstName) @ToTitleCase(EmployeeInfo.LastName)</strong></h3>
                            @if (EmploymentDate?.YearTerminated is not null)
                            {
                                <small class="ms-1 text-danger" style="margin-bottom: -0.4rem">
                                    Resigned
                                </small>
                            }
                            else
                            {
                                <span class="ms-1">
                                    <Badge Show="@EmployeeInfo.IsExempted"></Badge>
                                </span>
                            }
                        </div>
                        @if (EmploymentDate is not null)
                        {
                            <span style="font-size: 10px">Date hired: @EmploymentDate.DateHired()</span>
                        }
                    </div>
                    <div class="ms-3 ms-auto">
                        <button class="btn btn-outline-dark bi bi-pencil" title="Edit information" @onclick="HandleEditClick"></button>
                    </div>
                </div>
            </div>
        }

        <div class="mt-3">
            <InfractionCalendar EmployeeId="id" ></InfractionCalendar>
        </div>
    </div>
</div>

@if (EmployeeInfraction is not null && EmployeeInfraction.Infractions is not null)
{
    @foreach(var infraction in EmployeeInfraction.Infractions)
    {
        <div>@infraction.Infraction.Description</div>
    }
}

@code {
    private bool _isLoaded = false;
    private EmploymentDate? EmploymentDate { get; set; }
    [Parameter] public int id { get; set; }
    public DTO.Employee EmployeeInfo { get; set; }
    public CompositeEmployeeInfraction EmployeeInfraction { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetEmployeeAsync();
        await GetEmployeeInfractionsAsync();
        await GetCurrentEmploymentDateAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            _isLoaded = true;
        }
    }

    private async Task GetEmployeeInfractionsAsync()
    {
        if (HttpContextAccessor.HttpContext is HttpContext httpContext)
        {
            var response = await EmployeeInfractionService.AddParameter(id).GetAsync<CompositeEmployeeInfraction>(httpContext);

            if (response.Successful && response.Data is not null)
            {
                EmployeeInfraction = response.Data;
            }
        }
    }

    private async Task GetEmployeeAsync()
    {
        if (HttpContextAccessor.HttpContext is HttpContext httpContext)
        {
            var response = await EmployeeService.AddParameter(id).GetAsync<Employee>(httpContext);

            if (response.Successful && response.Data is not null)
            {
                EmployeeInfo = response.Data;
            }
        }
    }

    private async Task GetCurrentEmploymentDateAsync()
    {
        if (HttpContextAccessor.HttpContext is HttpContext httpContext)
        {
            var response = await EmploymentDateService
                .AddParameter("Current")
                .AddParameter(id)
                .GetAsync<EmploymentDate>(httpContext);

            if (response.Successful && response.Data is not null)
            {
                EmploymentDate = response.Data;
            }
            else
            {
                EmploymentDate = null;
            }
        }
    }

    private void HandleEditClick()
    {
        NavigationManager.NavigateTo($"/EditEmployee/{id}");
    }

    private string ToTitleCase(string input)
    {
        return CultureInfo.CurrentCulture.TextInfo.ToTitleCase(input.ToLower());
    }
}
