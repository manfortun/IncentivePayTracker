@page "/EditEmployeeInfraction/{EmployeeId:int}/{Month:int}-{Year:int}"
@using IncentivePayTracker.Blazor.ViewModels

@inject MessageService<EmpInfrEndpoint> EmployeeInfractionService
@inject MessageService<InfractionEndpoint> InfractionService
@inject IHttpContextAccessor HttpContextAccessor

@rendermode InteractiveServer
<div class="d-flex justify-content-center mt-3">
    <div class="div-content mb-2">
        @if (EmployeeInfraction is not null)
        {
            <div class="d-flex flex-row">
                <h3 class="mb-5"><strong>@EmployeeInfraction.Employee.FirstName @EmployeeInfraction.Employee.LastName</strong> - @DateExtensions.Months[EmployeeInfraction.Month] @EmployeeInfraction.Year</h3>
                @if (Adjustments.Any(a => a.InfractionType != InfractionAdjustment.Type.Saved))
                {
                    <div class="ms-auto">
                        <button class="btn btn-primary" @onclick="@Save"><i class="bi bi-floppy me-2"></i>Save</button>
                    </div>
                }
            </div>

            @if (Infractions is not null)
            {
                @foreach (var infraction in Infractions)
                {
                    var infr = Adjustments.Where(a => a.Id == infraction.Id);
                    int infrCount = infr.Count(i => i.InfractionType == InfractionAdjustment.Type.Saved || i.InfractionType == InfractionAdjustment.Type.Addition);

                    <div class="mb-4 bg-white p-3" style="border-radius: 20px; transition: all 0.3s ease-in-out">
                        @{
                            int adjustmentCount = GetAdjustmentCount(infraction.Id);
                        }

                        <div>
                            @if (adjustmentCount < 0)
                            {
                                <small class="text-danger"><strong>Removed: @Math.Abs(adjustmentCount)</strong></small>
                            }
                            else if (adjustmentCount > 0)
                            {
                                <small class="text-success"><strong>Added: @Math.Abs(adjustmentCount)</strong></small>
                            }
                        </div>
                        <div class="row mb-3">
                            <div class="col-8">
                                <small class="me-2">@infraction.Description</small>
                            </div>
                            <div class="col-4 d-flex flex-row align-self-baseline justify-content-end text-center">
                                <button class="btn btn-danger" @onclick="@(() => AdjustInfraction(infraction.Id, -1))" disabled="@(infrCount <= 0)"><i class="bi bi-dash"></i></button>
                                <h4 style="min-width: 50px; margin-top: 5px;" class="mb-0">@infrCount</h4>
                                <button class="btn btn-primary" @onclick="@(() => AdjustInfraction(infraction.Id, 1))"><i class="bi bi-plus"></i></button>
                            </div>
                        </div>
                        <div>
                            <span>
                                @foreach (var infrAdj in infr.OrderBy(a => a.InfractionType))
                                {
                                    if (infrAdj.InfractionType == InfractionAdjustment.Type.Saved)
                                    {
                                        <i class="bi bi-circle-fill infraction @InfractionExtensions.InfractionClass[infraction.Id]"></i>
                                    }
                                    else if (infrAdj.InfractionType == InfractionAdjustment.Type.Addition)
                                    {
                                        <i class="bi bi-plus-circle infraction @InfractionExtensions.InfractionClass[infraction.Id]"></i>
                                    }
                                    else if (infrAdj.InfractionType == InfractionAdjustment.Type.Deduction)
                                    {
                                        <i class="bi bi-dash-circle infraction @InfractionExtensions.InfractionClass[infraction.Id]"></i>
                                    }
                                }
                            </span>
                        </div>
                    </div>
                }
            }
        }
    </div>
</div>

@code {
    [Parameter] public int EmployeeId { get; set; }
    [Parameter] public int Month { get; set; }
    [Parameter] public int Year { get; set; }
    private CompositeEmployeeInfraction EmployeeInfraction = default!;
    private IEnumerable<Infraction> Infractions = default!;
    private List<InfractionAdjustment> Adjustments = default!;

    protected override async Task OnInitializedAsync()
    {
        await RefreshInfo();
        await RefreshInfractions();
    }

    private async Task RefreshInfo()
    {
        if (HttpContextAccessor.HttpContext is HttpContext httpContext)
        {
            var response = await EmployeeInfractionService
                .AddParameter("MonthlyInfraction")
                .AddParameter($"{Month}-{Year}")
                .AddParameter(EmployeeId)
                .GetAsync<CompositeEmployeeInfraction>(httpContext);

            if (response.Successful && response.Data is not null)
            {
                EmployeeInfraction = response.Data;

                if (EmployeeInfraction.Infractions is not null)
                {
                    Adjustments ??= new List<InfractionAdjustment>();
                    foreach (var infraction in EmployeeInfraction.Infractions)
                    {
                        foreach (var count in Enumerable.Range(1, infraction.Count))
                        {
                            Adjustments.Add(
                                new InfractionAdjustment
                                    {
                                        Id = infraction.Infraction.Id,
                                        InfractionType = InfractionAdjustment.Type.Saved
                                    }
                            );
                        }
                    }
                }
            }
        }
    }

    private async Task RefreshInfractions()
    {
        if (HttpContextAccessor.HttpContext is HttpContext httpContext)
        {
            var response = await InfractionService.GetAsync<IEnumerable<Infraction>>(httpContext);

            if (response.Successful && response.Data is not null)
            {
                Infractions = response.Data;
            }
        }
    }

    private async Task Save()
    {
        if (HttpContextAccessor.HttpContext is HttpContext httpContext)
        {
            EmployeeInfraction.Infractions ??= new List<CompositeInfraction>();
            foreach (var adjustment in Adjustments.GroupBy(a => a.Id))
            {
                var infraction = EmployeeInfraction.Infractions.FirstOrDefault(a => a.Infraction.Id == adjustment.Key);

                if (infraction is null)
                {
                    EmployeeInfraction.Infractions.Add(new CompositeInfraction
                        {
                            Infraction = new Infraction
                            {
                                Id = adjustment.Key,
                            },
                            Count = 0
                        });
                }

                infraction.Count += GetAdjustmentCount(adjustment.Key);
            }

            var response = await EmployeeInfractionService
                .PostAsync<Employee>(httpContext, EmployeeInfraction);
        }
    }

    private void AdjustInfraction(int infractionId, int direction)
    {
        var adjustments = Adjustments.Where(a => a.Id == infractionId).ToList();

        // deduction
        if (direction < 0)
        {
            var deduction = adjustments.FirstOrDefault(a => a.InfractionType == InfractionAdjustment.Type.Addition);

            if (deduction is null)
            {
                deduction = adjustments.FirstOrDefault(a => a.InfractionType == InfractionAdjustment.Type.Saved);

                if (deduction is null)
                {
                    // FALLTHROUGH
                    return;
                }

                deduction.InfractionType = InfractionAdjustment.Type.Deduction;
            }
            else
            {                                                                               
                Adjustments.Remove(deduction);
            }

        }
        // addition
        else
        {
            var addition = adjustments.FirstOrDefault(a => a.InfractionType == InfractionAdjustment.Type.Deduction);

            if (addition is not null)
            {
                addition.InfractionType = InfractionAdjustment.Type.Saved;
            }
            else
            {
                Adjustments.Add(
                    new InfractionAdjustment
                        {
                            Id = infractionId,
                            InfractionType = InfractionAdjustment.Type.Addition
                        });
            }
        }
    }

    private int GetAdjustmentCount(int infractionId)
    {
        var adjustments = Adjustments.Where(a => a.Id == infractionId);
        int deductionCount = adjustments.Count(a => a.InfractionType == InfractionAdjustment.Type.Deduction);
        int additionCount = adjustments.Count(a => a.InfractionType == InfractionAdjustment.Type.Addition);

        if (deductionCount > 0)
        {
            return deductionCount * -1;
        }
        else if (additionCount > 0)
        {
            return additionCount;
        }
        else
        {
            return 0;
        }
    }
}
